#!/usr/bin/env ruby
# encoding: ASCII-8BIT

PROJECT_DIR = File.expand_path('../..', __FILE__)
$LOAD_PATH.push(File.join(PROJECT_DIR, 'lib'))

require 'optparse'
require 'erb'
require 'entrospection.rb'
require 'generator.rb'

Generator.load_all

opts = {
  :limit => Float::INFINITY,
  :src => $stdin,
  :name => 'stdin',
  :report => nil,
}

parser = OptionParser.new do |op|
  op.banner = "Usage: #{File.basename($0)} [options]"

  op.on('-l', '--limit n[K|M|G]', 'only process n bytes') do |l|
    unit = { 'k' => 1024, 'm' => 2**20, 'g' => 2**30 }[l[-1].downcase]
    opts[:limit] = l.to_i * (unit || 1)
  end

  op.on('-g', '--generator <name>', 'use a builtin generator') do |g|
    klass = Generator.gmap[g.downcase]
    raise "Unknown generator - #{g}" unless klass
    opts[:src] = klass
    opts[:name] = klass.to_s
  end

  op.on('-f', '--file <name>', 'read entropy from a binary file') do |f|
    opts[:src] = File.open(f, :encoding => 'BINARY')
    opts[:name] = "File: #{File.basename(f)}"
  end

  op.on('-h', '--help', 'show help and list generators') do
    puts parser
    puts "\nAvailable Generators:"
    puts "   - #{Generator.summaries.sort.join("\n   - ")}"
    Kernel.exit(0)
  end
end

begin
  parser.parse!
  raise "Invalid option: #{ARGV.first}" unless ARGV.empty?
  if opts[:src].class <= Class and opts[:src] <= Generator
    opts[:src] = opts[:src].new(opts[:limit])
  end
rescue
  $stderr.puts "Error: #{$!}"
  Kernel.exit(1)
end

ent = Entrospection.new(width: 1, height: 1, contrast: 0.4)
begin
  ent << opts[:src]
rescue Exception => e
  $stderr.puts "Stream terminated, saving analysis..."
ensure
  ent.covariance_png.save('covariance.png', :interlace => true)
  ent.byte_png.save('byte.png', :interlace => true)
  ent.bit_png.save('bit.png', :interlace => true)
  ent.pvalue.each_key do |pt|
    ent.pvalue_png(pt).save("#{pt}.png", :interlace => true)
  end
  ent.pvalues_png.save('pvalues.png', :interlace => true)

  # Generate our report
  generator = opts[:name]
  bytes = ent.bytes
  template = File.open("#{PROJECT_DIR}/lib/report.html.erb", 'r').read
  erb = ERB.new(template)
  File.open("report.html", 'w+') { |file| file.write(erb.result(binding)) }
end
