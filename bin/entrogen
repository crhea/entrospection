#!/usr/bin/env ruby

PROJECT_DIR = File.expand_path('../..', __FILE__)
$LOAD_PATH.push(File.join(PROJECT_DIR, 'lib'))

require 'optparse'

Signal.trap("INT") { exit(0) }

# Require and return a list of all canned generators
def load_generators
  klasses = Module.constants
  gen = Dir.glob(File.join(PROJECT_DIR, 'lib', 'generators', '*.rb'))
  gen.each { |g| require g }
  klasses = (Module.constants - klasses).map { |k| Kernel.const_get(k) }
  klasses.select { |k| k.class == Class and k.superclass == Generator }
end

def summaries_for(generators)
  generators.map do |generator|
    name = generator.to_s.sub('Generator', '')
    "#{name}#{' ' * (14 - name.length)}- #{generator.summary}"
  end
end

generators = load_generators()

opts = {}
parser = OptionParser.new do |options|
  options.banner =<<-HERE
Usage: ./#{File.basename($0)} [options] GENERATOR-NAME | entrospect
       ./#{File.basename($0)} [options] GENERATOR-NAME > <path-to-file> 

Available Generators:
   - #{summaries_for(generators).join("\n   - ")}

Options:
HERE

  options.on("-l", "--limit n[K|M|G]", "generate exactly n bytes") do |l|
    unit = { 'k' => 1024, 'm' => 2**20, 'g' => 2**30 }[l[-1].downcase]
    opts[:limit] = l.to_i * (unit || 1)
  end

  options.on("-h", "--help", "Show this help") do
    puts options
    exit
  end

end

begin
  parser.parse!
  # take whats left from the command line and assume it for the generator name
  opts[:generator] = ARGV.shift
  klass = generators.find do |k|
    k.to_s.downcase == opts[:generator].downcase + 'generator'
  end
  exit 1 unless klass
rescue Exception
    puts "Error: you must provide a valid generator name"
    puts parser
    exit 1
end

#create a description file to build a more descriptive report
File.open(".options", 'w+') { |file| file.write(klass.to_s[0, klass.to_s.length - 9] + ';' + klass.description + ';' + (opts[:limit] || 0).to_s) }

klass.new(opts[:limit] || Float::INFINITY).pipe_to($stdout)
