#!/usr/bin/env ruby

PROJECT_DIR = File.expand_path('../..', __FILE__)
$LOAD_PATH.push(File.join(PROJECT_DIR, 'lib'))

require 'optparse'
require 'generator.rb'

Signal.trap("INT") { exit(0) }

Generator.load_all

opts = {}
parser = OptionParser.new do |options|
  options.banner =<<-HERE
Usage: ./#{File.basename($0)} [options] GENERATOR-NAME | entrospect
       ./#{File.basename($0)} [options] GENERATOR-NAME > <path-to-file> 

Available Generators:
   - #{Generator.summaries.join("\n   - ")}

Options:
HERE

  options.on("-l", "--limit n[K|M|G]", "generate exactly n bytes") do |l|
    unit = { 'k' => 1024, 'm' => 2**20, 'g' => 2**30 }[l[-1].downcase]
    opts[:limit] = l.to_i * (unit || 1)
  end

  options.on("-h", "--help", "Show this help") do
    puts options
    exit 0
  end

end

begin
  parser.parse!
  # take whats left from the command line and assume it for the generator name
  raise "Too many arguments" if ARGV.length > 1
  raise "You must specify a generator name" if ARGV.length < 1
  opts[:generator] = ARGV.shift
  klass = Generator.gmap[opts[:generator]]
  raise "Unknown generator: #{opts[:generator]}" unless klass
rescue
    $stderr.puts "Error: #{$!}"
    $stderr.puts parser
    exit 1
end

#create a description file to build a more descriptive report
File.open(".options", 'w+') { |file| file.write(klass.to_s[0, klass.to_s.length - 9] + ';' + klass.description + ';' + (opts[:limit] || 0).to_s) }

klass.new(opts[:limit] || Float::INFINITY).pipe_to($stdout)
