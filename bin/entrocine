#!/usr/bin/env ruby
# encoding: ASCII-8BIT

PROJECT_DIR = File.expand_path('../..', __FILE__)
$LOAD_PATH.push(File.join(PROJECT_DIR, 'lib'))

require 'optparse'
require 'entrospection.rb'

Signal.trap("INT") { exit(0) }

# Take a string that may end with a 'k', 'm', or 'g' and treat it as a suffixed
# number of bytes. Case doesn't matter.
def parse_bytes(str)
  unit = { 'k' => 1024, 'm' => 2**20, 'g' => 2**30 }[str[-1].downcase]
  str.to_i * (unit || 1)
end

opts = {
  :window => 2**23,   # 8MB
  :slide => 2**17,    # 128kB
  :frames => 1800,    # 30fps for 1 minute
}
parser = OptionParser.new do |options|
  options.banner = "Usage: <data src> | #{File.basename($0)} [options]"

  options.on('-w', '--window n[K|M|G]', 'specify a total window size') do |w|
    opts[:window] = parse_bytes(w)
  end

  options.on('-s', '--slide n[K|M|G]', 'specify a window slide amount') do |s|
    opts[:slide] = parse_bytes(s)
  end

  options.on('-f', '--frames n', 'specify total number of output frames') do |f|
    opts[:frames] = f.to_i
  end

  options.on('-h', '--help', 'show this help') do
    puts options
    exit 0
  end
end
parser.parse!

ent = Entrospection.new
chunks = []
opts[:frames].times do |frame|

  # Fill up, one chunk at a time, until we hit our high water mark
  while chunks.length * opts[:slide] < opts[:window]
    chunks << $stdin.read(opts[:slide])
    raise "all done" if chunks.last.length < opts[:slide]
    ent << chunks.last
  end

  # Merge our statistical-inspection images
  merged = ChunkyPNG::Image.new(512, 512)
  sub = [ ent.covariance_png, ent.byte_png, ent.bit_png, ent.pvalues_png ]
  256.times do |x|
    256.times do |y|
      merged[x, y] = sub[0][x, y]
      merged[x + 256, y] = sub[1][x, y]
      merged[x, y + 256] = sub[2][x, y]
      merged[x + 256, y + 256] = sub[3][x, y]
    end
  end
  merged.save('cine/entro%08u.png' % frame, :interlace => true)

  # Back out the oldest chunk
  ent >> chunks.shift

end

# Finally, if ffmpeg is installed, generate our movie
begin
  `ffmpeg -framerate 15 -i cine/entro%8d.png -c:v libx264 -r 30 -pix_fmt yuv420p entro.mp4`
rescue Errno::ENOENT
  $stderr.puts "ffmpeg does not appear to be installed; images left in cine/*"
end
